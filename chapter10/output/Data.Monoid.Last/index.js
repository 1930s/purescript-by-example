// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");

/**
 *  | Monoid returning the last (right-most) non-Nothing value.
 *  |
 *  | ``` purescript
 *  | Last (Just x) <> Last (Just y) == Last (Just y)
 *  | Last (Just x) <> Nothing == Last (Just x)
 *  | Last Nothing <> Nothing == Last Nothing
 *  | mempty :: Last _ == Last Nothing
 *  | ```
 */
var Last = function (x) {
    return x;
};
var showLast = function (__dict_Show_0) {
    return new Prelude.Show(function (_170) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_170) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (last) {
    return function (_171) {
        if (_171 instanceof Data_Maybe.Just) {
            return _171;
        };
        if (_171 instanceof Data_Maybe.Nothing) {
            return last;
        };
        throw new Error("Failed pattern match");
    };
});
var runLast = function (_159) {
    return _159;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (_166) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_166);
    };
});
var extendLast = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendLast)(f)(x);
    };
}, function () {
    return functorLast;
});
var eqLast = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_162) {
        return function (_163) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_162)(_163);
        };
    }, function (_160) {
        return function (_161) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_160)(_161);
        };
    });
};
var ordLast = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqLast(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_164) {
        return function (_165) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_164)(_165);
        };
    });
};
var applyLast = new Prelude.Apply(function (_167) {
    return function (_168) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_167)(_168);
    };
}, function () {
    return functorLast;
});
var bindLast = new Prelude.Bind(function (_169) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_169)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(f));
    };
}, function () {
    return applyLast;
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};
