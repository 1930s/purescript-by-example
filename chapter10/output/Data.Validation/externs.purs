-- Generated by psc-make version 0.6.9.3
module Data.Validation where
import Prelude ()
import Prim ()
import Prelude ()
--  | The `V` functor, used for applicative validation
--  |
--  | The `Applicative` instance collects multiple failures in
--  | an arbitrary `Semigroup`.
--  |
--  | For example:
--  |
--  | ```purescript
--  | validate :: Person -> V [Error] Person
--  | validate person = { first: _, last: _, email: _ }
--  |   <$> validateName person.first
--  |   <*> validateName person.last
--  |   <*> validateEmail person.email
--  | ```
--  | Unpack the `V` type constructor, providing functions to handle the error
--  | and success cases.
--  | Test whether validation was successful or not
--  | Fail with a validation error
data V (err :: *) (result :: *)
foreign import isValid :: forall err result r. Data.Validation.V err result -> Prim.Boolean
foreign import runV :: forall err result r. (err -> r) -> (result -> r) -> Data.Validation.V err result -> r
foreign import invalid :: forall err result. err -> Data.Validation.V err result
foreign import instance showV :: (Prelude.Show err, Prelude.Show result) => Prelude.Show (Data.Validation.V err result)
foreign import instance functorV :: Prelude.Functor (Data.Validation.V err)
foreign import instance applyV :: (Prelude.Semigroup err) => Prelude.Apply (Data.Validation.V err)
foreign import instance applicativeV :: (Prelude.Semigroup err) => Prelude.Applicative (Data.Validation.V err)
