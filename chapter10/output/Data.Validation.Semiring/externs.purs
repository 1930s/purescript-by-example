-- Generated by psc-make version 0.6.9.3
module Data.Validation.Semiring where
import Prelude ()
import Prim ()
import Prelude ()
import Control.Alt ()
import Control.Plus ()
import Control.Alternative ()
--  | The `V` functor, used for alternative validation
--  |
--  | The `Alternative` instance collects multiple failures in
--  | an arbitrary `Semiring`.
--  | 
--  | For example:
--  | 
--  | ```purescript
--  | import Data.Semiring.Free
--  | 
--  | validate r :: Person -> V (Free Error) Person 
--  | validate person = { first: _, last: _, contact: _}
--  |   <$> validateName person.first
--  |   <*> validateName person.last
--  |   <*> (validateEmail person.contact <|> validatePhone person.contact)
--  | ```
--  | Unpack the `V` type constructor, providing functions to handle the error
--  | and success cases.
--  | Test whether validation was successful or not
--  | Fail with a validation error
data V (err :: *) (res :: *)
foreign import isValid :: forall err result. Data.Validation.Semiring.V err result -> Prim.Boolean
foreign import runV :: forall err result r. (err -> r) -> (result -> r) -> Data.Validation.Semiring.V err result -> r
foreign import invalid :: forall err result. err -> Data.Validation.Semiring.V err result
foreign import instance showV :: (Prelude.Show err, Prelude.Show result) => Prelude.Show (Data.Validation.Semiring.V err result)
foreign import instance functorV :: Prelude.Functor (Data.Validation.Semiring.V err)
foreign import instance applyV :: (Prelude.Semiring err) => Prelude.Apply (Data.Validation.Semiring.V err)
foreign import instance applicativeV :: (Prelude.Semiring err) => Prelude.Applicative (Data.Validation.Semiring.V err)
foreign import instance altV :: (Prelude.Semiring err) => Control.Alt.Alt (Data.Validation.Semiring.V err)
foreign import instance plusV :: (Prelude.Semiring err) => Control.Plus.Plus (Data.Validation.Semiring.V err)
foreign import instance alernativeV :: (Prelude.Semiring err) => Control.Alternative.Alternative (Data.Validation.Semiring.V err)
