// Generated by psc-make version 0.6.9.3
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");

/**
 *  | The dual of a monoid.
 *  |
 *  | ``` purescript
 *  | Dual x <> Dual y == Dual (y <> x)
 *  | mempty :: Dual _ == Dual mempty
 *  | ```
 */
var Dual = function (x) {
    return x;
};
var showDual = function (__dict_Show_0) {
    return new Prelude.Show(function (_92) {
        return "Dual (" + (Prelude.show(__dict_Show_0)(_92) + ")");
    });
};
var semigroupDual = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_93) {
        return function (_94) {
            return Prelude["<>"](__dict_Semigroup_1)(_94)(_93);
        };
    });
};
var runDual = function (_81) {
    return _81;
};
var monoidDual = function (__dict_Monoid_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_3));
};
var functorDual = new Prelude.Functor(function (f) {
    return function (_88) {
        return f(_88);
    };
});
var extendDual = new Control_Extend.Extend(function (f) {
    return function (x) {
        return f(x);
    };
}, function () {
    return functorDual;
});
var eqDual = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_84) {
        return function (_85) {
            return Prelude["/="](__dict_Eq_4)(_84)(_85);
        };
    }, function (_82) {
        return function (_83) {
            return Prelude["=="](__dict_Eq_4)(_82)(_83);
        };
    });
};
var ordDual = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDual(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_86) {
        return function (_87) {
            return Prelude.compare(__dict_Ord_2)(_86)(_87);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function (_89) {
    return function (_90) {
        return _89(_90);
    };
}, function () {
    return functorDual;
});
var bindDual = new Prelude.Bind(function (_91) {
    return function (f) {
        return f(_91);
    };
}, function () {
    return applyDual;
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};
